#!/usr/bin/perl
#
# Install UBOS on one or more currently unmounted devices or disk images,
# or in a directory.
#
# Examples:
#     ubos-install /dev/sda
#             Install on a hard drive
#     ubos-install --hostname myserver /dev/sda /dev/sdb
#             Install on two hard drives in raid mode. Use provided hostname
#     ubos-install /some/file
#             Install on an image file. File must exist.
#     ubos-install --directory /some/directory
#             Install in a directory, to be run in a Linux container. Directory must exist.
#
# This file is part of ubos-install.
# (C) 2012-2015 Indie Computing Corp.
#
# ubos-install is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ubos-install is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with ubos-install.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use warnings;

use Getopt::Long qw( :config pass_through );

use UBOS::Logging;
use UBOS::Utils;

my $verbose            = 0;
my $logConfigFile      = undef;
my $list               = 0;
my $ret                = 0;
my $channel            = undef;
my $hostname           = undef;
my $deviceclassname    = undef;
my $target             = undef;
my $repo               = undef;
my $depotRoot          = undef;
my @additionalPackages = ();
my @additionalServices = ();
my @additionalModules  = ();
my @addKernelParameter = ();
my $checkSignatures    = 'required';
my $help               = 0;

my $parseOk = GetOptions(
        'verbose+'             => \$verbose,
        'logConfig=s'          => \$logConfigFile,
        'list'                 => \$list,
        'channel=s'            => \$channel,
        'hostname=s'           => \$hostname,
        'deviceclass=s'        => \$deviceclassname,
        'target=s'             => \$target,
        'repository=s'         => \$repo,
        'depotroot=s'          => \$depotRoot,
        'addpackage=s'         => \@additionalPackages,
        'addservice=s'         => \@additionalServices,
        'addmodule=s'          => \@additionalModules,
        'addkernelparameter=s' => \@addKernelParameter,
        'checksignatures=s'    => \$checkSignatures,
        'h|help'               => \$help );

UBOS::Logging::initialize( 'ubos-install', undef, $verbose, $logConfigFile );

if( !$parseOk ) {
    synopsisHelpQuit( 0 );
}
if( $help ) {
    synopsisHelpQuit( 1 );
}
if( $list ) {
    listInstallersQuit();
}

$checkSignatures = lc( $checkSignatures );
if( $checkSignatures ne 'never' && $checkSignatures ne 'optional' && $checkSignatures ne 'required' ) {
    synopsisHelpQuit( 0 );
}

# Just invoking help doesn't trigger this check
if ( $< != 0 ) {
    fatal( "This command must be run as root" );
}

if( $target && ! -d $target ) {
    fatal( 'Target is not a directory:', $target );
}
# Use current device class if not given as parameter
unless( $deviceclassname ) {
    $deviceclassname = UBOS::Utils::deviceClass();
}
unless( $deviceclassname ) {
    fatal( 'Cannot automatically determine --deviceclass. Need to specify as argument.' );
}

my $installer = findInstaller( $deviceclassname );
unless( $installer ) {
    fatal( 'Cannot find installer for device class', $deviceclassname );
}

if( $target ) {
    $installer->setTarget( $target );
}
if( $hostname ) {
    $installer->setHostname( $hostname );
}
if( !$channel && -r '/etc/ubos/channel' ) {
    $channel = UBOS::Utils::slurpFile( '/etc/ubos/channel' );
    $channel =~ s!^\s+!!;
    $channel =~ s!\s+$!!;
}
if( $channel ) {
    $installer->setChannel( $channel );
}
if( $repo ) {
    $installer->setRepo( $repo );
}
if( $depotRoot ) {
    $installer->setDepotRoot( $depotRoot );
}
if( @additionalPackages ) {
    $installer->addPackages( @additionalPackages );
}
if( @additionalServices ) {
    $installer->addServices( @additionalServices );
}
if( @additionalModules ) {
    $installer->addPackages( @additionalModules );
}
if( @addKernelParameter ) {
    $installer->addKernelParameters( @addKernelParameter );
}
$installer->setCheckSignatures( $checkSignatures );

trace( 'Using installer', ref( $installer ));

my $diskLayout = $installer->createDiskLayout( \@ARGV );
unless( $diskLayout ) {
    synopsisHelpQuit( 0 );
}
my $errors = $installer->install( $diskLayout );
if( $errors ) {
    info( 'There were', $errors, 'errors.' );
    $ret = 1;
}

exit( $ret );


##
# Find the right installer for this device class
sub findInstaller {
    my $className = shift;

    my $installers = getInstallers();
    my $installer  = $installers->{$className};

    unless( $installer ) {
        return undef;
    }

    my $ret = UBOS::Utils::invokeMethod( $installer . '->new' );
    return $ret;
}

##
# Get the available installers
my $_installers;
sub getInstallers {
    unless( $_installers ) {
        $_installers = UBOS::Utils::findPerlShortModuleNamesInPackage( 'UBOS::Install::Installers' );
    }
    return $_installers;
}

##
# List the available installers and quit
sub listInstallersQuit {
    my $installers = getInstallers();

    print UBOS::Utils::hashAsColumns(
            $installers,
            sub {
                my $installer = shift;
                UBOS::Utils::invokeMethod( $installer . '::help' );
            } );

    return 1;
}

#####
# Print synopsis or help
# $long: if true, print long help
# $exit: exit code
sub synopsisHelpQuit {
    my $long = shift;
    my $exit = shift || 0;

    if( $long ) {
        print <<END;
Install UBOS.
END
    } else {
        print "Synopsis:\n";
    }
    print "    $0 <device> ...\n";
    if( $long ) {
        print <<END;
        Install UBOS on <device>. <device> must be a disk device, or a pre-allocated disk image,
        or an empty directory.
        If more than one <device> is given, mirror across at least two disks (RAID1).
        WARNING: THIS WILL FORMAT <device>. ALL YOUR DATA ON IT WILL BE LOST.
END
    }

    print "    $0 [ --bootpartition <part> ][ --varpartition <part> ][ --bootloaderdevice <dev>] --rootpartition <part>\n";
    if( $long ) {
        print <<END;
        Install UBOS on root partition <part>. <part> must be a partition such as /dev/sda3.
        If more than one root partition is given, mirror across at least two partitions (RAID1).
        WARNING: THIS WILL OVERWRITE all partitions you specify. ALL YOUR DATA ON THEM WILL BE LOST.
        However, it will not change the partition table, nor will it touch other partitions.
END
    }
    print "    $0 --help\n";
    if( $long ) {
        print <<END;
        Display help text.

END
    }
    if( $long ) {

        print <<END;
Optional arguments:
        --verbose:
              Increase amount of status output.
        --logConfFile <log4perlconf>:
              Alternate logging configuration file (not common).
        --channel <channel>:
              The UBOS release channel; defaults to the release channel of the system on which
              the command is run.
        --hostname <hostname>:
              The hostname to set; defaults to a deviceclass-specific name.
        --repository <path>:
              Use this local UBOS repository for installation instead of http://depot.ubos.net/
        --depotroot <url>:
              Use this URL for the root of the update repository instead of http://depot.ubos.net
        --target <path>:
              The directory to which the new system will be mounted temporarily during assembly.
              Defaults to a temp directoy in the current working directory. Make sure there
              is enough disk space for the entire system
        --deviceclass <class>:
              The device class, e.g. rpi (Raspberry Pi), pc (x86_64 PC). The host on which $0
              is run, and deviceclass must be compatible (e.g. don't specify rpi on a PC).
        --checksignatures <never|optional|required>
              Should package signatures be checked. Same as in pacman.conf(5). Defaults to required.
        --bootpartition <part>:
              Use this block device as boot partition. If not provided, there will be no
              separate boot partition. Note that some systems (e.g. Raspberry Pi) cannot
              boot from a btrfs filesystem, and thus require that you specify a separate
              boot partition that can be formatted as vfat.
        --bootloaderdevice <dev>:
              Install the boot loader on this block device. This is only required for
              some systems (e.g. PC) where boot loaders are written to a special place
              on the hard disk.
        --varpartition <part>:
              Use a separate /var partition. If more than one var partition is given, mirror
              across at least two partitions (RAID1).
        --swappartion <part>:
              Create a swap partition, or several if more than one is given.
        --addpackage <package>:
              Name of an additional package to install beyond the default of the device class
        --addservice <service>:
              Name of an additional systemd service to enable beyond the default of the device class
        --addmodule <module>:
              Name of an additional kernel module to load beyond the default of the device class
        --addkernelparameter <parameter>:
              Verbatim string to be appended to the kernel boot parameter. This currently only
              works on some device classes.
END
    } else {
        print <<END;
Optional arguments:
        [--verbose][--logConfFile <log4perlconf>]
        [--channel <channel>][--hostname <hostname>][--repository <path>][--target <path>]
        [--deviceclass <class>][--checksignatures <never|optional|required>]
        [--bootpartition <part>][--bootloaderdevice <dev>][--varpartition <part>][--swappartition <part>]
        [--addpackage <package>][--addservice <service>][--addmodule <module>][--addkernelparameter <parameter>]

END
    }
    exit 1;
}

1;
