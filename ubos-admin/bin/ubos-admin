#!/usr/bin/perl
#
# Central administration script for UBOS administration
#
# Copyright (C) 2014 and later, Indie Computing Corp. All rights reserved. License: see package.
#

use strict;
use warnings;

use Fcntl ':flock';
use UBOS::Host;
use UBOS::Logging;
use UBOS::Utils;

my $commands = UBOS::Utils::findPerlShortModuleNamesInPackage( 'UBOS::Commands' );

unless( @ARGV ) {
    synopsisHelpQuit();
}
my $command = $ARGV[0];
if( '--help' eq $command || '-h' eq $command ) {
    if( @ARGV == 2 ) {
        synopsisHelpQuit( 1, $ARGV[1] );
    } else {
        synopsisHelpQuit( 1 );
    }
}

my $commandPackage = $commands->{$command};
if( $commandPackage ) {
    my $skipCheckReady = 0;
    my @remainingArgs  = ();
    foreach my $arg ( @ARGV ) {
        if( '--help' eq $arg || '-h' eq $arg ) {
            if( $commandPackage ) {
                synopsisHelpQuit( 1, $command );
            } else {
                synopsisHelpQuit( 1 );
            }
        } elsif( '--skip-check-ready' eq $arg ) {
            $skipCheckReady = 1;
        } else {
            push @remainingArgs, $arg;
        }
    }

    unless( $skipCheckReady ) {
        unless( defined( UBOS::Host::checkReady())) {
            exit -1;
        }
    }
    checkOnlyOne();

    my $result = UBOS::Utils::invokeMethod( $commandPackage . '::run', @remainingArgs );

    exit !$result;
} else {
    synopsisHelpQuit( 0, undef, 1 );
}

#####
# Check that only one copy of the script is running at any time.
sub checkOnlyOne {
    # See __DATA__ at end of file
    unless( flock( DATA, LOCK_EX|LOCK_NB )) {
        print STDERR <<END;
Another copy of ubos-admin is running already. Please try again later.
END
        exit -2;
    }
}

#####
# Print synopsis or help
# $long: if true, print long help
# $helpFor: if given, only provide help on this command
# $exit: exit code
sub synopsisHelpQuit {
    my $long    = shift;
    my $helpFor = shift;
    my $exit    = shift || 0;

    my $cmd = $0;
    $cmd =~ s!.*/!!;

    if( $helpFor ) {
        my $package = $commands->{$helpFor};
        unless( $package ) {
            print STDERR <<END;
Command does not exist: ubos-admin $helpFor
END
            exit -1;
        }

        my $synopsisHelp = UBOS::Utils::invokeMethod( $package . '::synopsisHelp' ) || '';

        if( $synopsisHelp ) { # skip commands that don't have this
            if( exists( $synopsisHelp->{'summary'} )) {
                my $summary = $synopsisHelp->{'summary'};
                $summary =~ s!^\s+!!gm;
                $summary =~ s!\s+$!!gm;

                print "$summary\n\n";
            }
            if( exists( $synopsisHelp->{'detail'} )) {
                my $detail = $synopsisHelp->{'detail'};
                $detail =~ s!^\s+!!gm;
                $detail =~ s!\s+$!!gm;

                print "$detail\n\n";
            }

            print "It can be invoked as follows:\n\n";

            foreach my $invocation ( sort keys %{$synopsisHelp->{'cmds'}} ) {
                my $help = $synopsisHelp->{'cmds'}->{$invocation};

                $invocation =~ s!^\s+!!;
                $invocation =~ s!\s+$!!;
                $help =~ s!^\s+!!gm;
                $help =~ s!\s+$!!gm;
                $help =~ s!^!        !gm;

                print "    $cmd $helpFor" . ( $invocation ? " $invocation" : '' ) . "\n";
                print "$help\n\n";
            }
            if( exists( $synopsisHelp->{'args'} )) {
                print "Optional arguments:\n\n";
                foreach my $arg ( sort keys %{$synopsisHelp->{'args'}} ) {
                    my $help = $synopsisHelp->{'args'}->{$arg};

                    $help =~ s!^\s+!!;
                    $help =~ s!\s+$!!;
                    $help =~ s!^\s+!!gm;
                    $help =~ s!\s+$!!gm;
                    $help =~ s!^!        !gm;

                    print "    $arg\n";
                    print "$help\n\n";
                }
            }
        } else {
            print "This command exists but has no help text.\n";
        }

    } else {
        # !$helpFor
        if( $long ) {
            print <<END;

ubos-admin is the central UBOS administration command.
For more information about UBOS, visit http://ubos.net/

This command may be invoked in the following ways:

END
        } else {
            print "Synopsis:\n";
        }

        foreach my $subCommand ( sort keys %$commands ) {
            my $package      = $commands->{$subCommand};
            my $synopsisHelp = UBOS::Utils::invokeMethod( $package . '::synopsisHelp' ) || '';

            if( $synopsisHelp ) { # skip commands that don't have this

                print "    $cmd $subCommand [<args>...]\n";

                if( $long && exists( $synopsisHelp->{'summary'} )) {
                    my $help = $synopsisHelp->{'summary'};
                    $help =~ s!^\s+!!gm;
                    $help =~ s!\s+$!!gm;
                    $help =~ s!^!        !gm;

                    print "$help\n\n";
                }
            }
        }

        print "    $cmd --help\n";
        if( $long ) {
            print <<END;
        Display help text.

END
        }
        print "    $cmd <command> --help\n";
        if( $long ) {
            print <<END;
        Display help text for this command.

END
        }
    }

    exit $exit;
}

1;

# mandatory line, flocking depends on DATA file handle
__DATA__
